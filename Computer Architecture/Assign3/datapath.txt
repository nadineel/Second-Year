----------------------------------------------------------------------------------
-- Company: 
-- Engineer: Bernadine Lao
-- 
-- Create Date: 12.11.2020 00:14:25
-- Design Name: 
-- Module Name: dataPath - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity dataPath is
  Port (clk : in std_logic;
        write: in std_logic;
        
        MB_select: in STD_LOGIC;
        MD_select: in STD_LOGIC;
        data_in : in  STD_LOGIC_VECTOR (31 downto 0);
        D_address : in std_logic_vector(5 downto 0);
        A_address : in std_logic_vector(5 downto 0);
        B_address : in std_logic_vector(5 downto 0);       
        FS: in  STD_LOGIC_VECTOR (4 downto 0);
            
        address_out : out  STD_LOGIC_VECTOR (31 downto 0);
        data_out : out  STD_LOGIC_VECTOR (31 downto 0);
        V : out STD_LOGIC;
        C : out STD_LOGIC;
        N : out STD_LOGIC;
        Z : out STD_LOGIC;
        --for zero fill
        SB:in std_logic_vector(4 downto 0);
        --for MuxM
        MM : in std_logic;
        pc_in : in  STD_LOGIC_VECTOR (31 downto 0)
         );
end dataPath;

architecture Behavioral of dataPath is

    COMPONENT function_unit
    Port ( 
        A : in  STD_LOGIC_VECTOR (31 downto 0);        
        B : in  STD_LOGIC_VECTOR (31 downto 0);
        FS: in  STD_LOGIC_VECTOR (4 downto 0);      
        N: out STD_LOGIC;
        Z: out STD_LOGIC;
        C: out STD_LOGIC;
        V: out STD_LOGIC;
        F : out  STD_LOGIC_VECTOR (31 downto 0)
  );
    
    END COMPONENT;
    
    COMPONENT regFile
    Port (--inputs
        A_select:in std_logic_vector (5 downto 0);
        B_select:in std_logic_vector (5 downto 0);
        Dest_select:in std_logic_vector (5 downto 0);
        
        D_data:in std_logic_vector (31 downto 0);
        
        write: in std_logic;
        Clk: in std_logic;
        
        --outputs
        A_data:out std_logic_vector (31 downto 0);
        B_data:out std_logic_vector (31 downto 0)
        
        );
        
        
    END COMPONENT;
    
    
    COMPONENT mux2_32
     Port (s : in  STD_LOGIC;
        in1 : in  STD_LOGIC_VECTOR (31 downto 0);
        in2 : in  STD_LOGIC_VECTOR (31 downto 0);
        z : out  STD_LOGIC_VECTOR (31 downto 0));
    END COMPONENT;
    
    COMPONENT zero_fill
     Port (i: in  STD_LOGIC_VECTOR (4 downto 0);
         o: out  STD_LOGIC_VECTOR (31 downto 0)  );
    END COMPONENT;

--signals
    signal A_data_out : STD_LOGIC_VECTOR(31 downto 0);
	signal B_data_out : STD_LOGIC_VECTOR(31 downto 0);
    signal muxB_out : STD_LOGIC_VECTOR(31 downto 0);
    signal fu_out : STD_LOGIC_VECTOR(31 downto 0);	
	signal muxD_out : STD_LOGIC_VECTOR(31 downto 0);
	signal constant_in : STD_LOGIC_VECTOR (31 downto 0);
	
	
	

begin


    address_out <= A_data_out;
	data_out <= muxB_out;
	
	reg_file : regFile port map(
        Clk => clk,
        write=>write,
        D_data => muxD_out,
        A_select => A_address,
        B_select => B_address,
        Dest_select => D_address,
        A_data => A_data_out,
        B_data => B_data_out
    );
 
    functionUnit : function_unit port map(
		A=>A_data_out,
		B=>muxB_out,
		FS=>FS,
		F=>fu_out,
		V=>V,
		C=>C,
		N=>N,
		Z=>Z);

	muxB : mux2_32 port map(
		in1 => B_data_out,
		in2 => constant_in,
		S => MB_select,
		Z => muxB_out);

	muxD : mux2_32 port map(
		in1 => fu_out,
		in2 => data_in,
		S => MD_select,
		Z => muxD_out);
		
	muxM : mux2_32 port map(
		in1 => pc_in,
		in2 => A_data_out,
		S => MM,
		Z => address_out);	
		
    z_fill: zero_fill port map(
        i=>SB,
        o=>constant_in
        );


end Behavioral;
