----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 29.12.2020 13:36:38
-- Design Name: 
-- Module Name: proc - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity proc is
  Port ( clk:in std_logic;
          reset: in std_logic);
end proc;

architecture Behavioral of proc is

--datapath
component datapath 
  Port (clk         : in std_logic;
        write       : in std_logic;
        
        MB_select   : in STD_LOGIC;
        MD_select   : in STD_LOGIC;
        data_in     : in  STD_LOGIC_VECTOR (31 downto 0);
        D_address   : in std_logic_vector(5 downto 0);
        A_address   : in std_logic_vector(5 downto 0);
        B_address   : in std_logic_vector(5 downto 0);       
        FS          : in  STD_LOGIC_VECTOR (4 downto 0);
            
        address_out : out  STD_LOGIC_VECTOR (31 downto 0);
        data_out    : out  STD_LOGIC_VECTOR (31 downto 0);
        V           : out STD_LOGIC;
        C           : out STD_LOGIC;
        N           : out STD_LOGIC;
        Z           : out STD_LOGIC;
        --for zero fill
        SB          :in std_logic_vector(4 downto 0);
        --for MuxM
        MM          : in std_logic;
        pc_in       : in  STD_LOGIC_VECTOR (31 downto 0)
         );
end component;

--memory
component memory
Port (  clk     : in std_logic;
        address : in std_logic_vector(31 downto 0);
        data_in : in  std_logic_vector(31 downto 0);
        MW      : in std_logic;
        data_out: out std_logic_vector(31 downto 0)
        );
end component;

--microprogram_control
component micro_con
  Port (Vflag       : IN std_logic;
        Cflag       : IN std_logic;
        Nflag       : IN std_logic;
        Zflag       : IN std_logic;

        instruction : IN std_logic_vector(31 DOWNTO 0);
        clk         : IN std_logic;
        reset       : IN std_logic;

        PCout       : OUT std_logic_vector(31 DOWNTO 0);
        
        FL          : OUT std_logic;
        RZ          : OUT std_logic;
        RN          : OUT std_logic;
        RC          : OUT std_logic;
        RV          : OUT std_logic;
        
        TD           : OUT std_logic;
        TA           : OUT std_logic;
        TB           : OUT std_logic;

        MB           : OUT std_logic;
        FS           : OUT std_logic_vector(4 DOWNTO 0);
        MD           : OUT std_logic;
        RW           : OUT std_logic;
        MM           : OUT std_logic;
        MW           : OUT std_logic;

        
        PL           : OUT std_logic;
        PI           : OUT std_logic;
        IL           : OUT std_logic;
        MC           : OUT std_logic;
        MS           : OUT std_logic_vector(2 DOWNTO 0);
        NA           : OUT std_logic_vector(16 DOWNTO 0);

        DR           : OUT std_logic_vector(4 DOWNTO 0);
        SA           : OUT std_logic_vector(4 DOWNTO 0);
        SB           : OUT std_logic_vector(4 DOWNTO 0)
    );
end component; 

    signal adr_out : std_logic_vector(31 DOWNTO 0);
    signal data_out : std_logic_vector(31 DOWNTO 0);

    signal VFlag : std_logic;
    signal CFlag : std_logic;
    signal NFlag : std_logic;
    signal ZFlag : std_logic;

    signal PC : std_logic_vector(15 DOWNTO 0);
    signal DR, SA, SB : std_logic_vector(4 DOWNTO 0);
    signal TD, TA, TB : std_logic;
    signal MB, MM, MW, MD : std_logic;
    signal FS : std_logic_vector(4 DOWNTO 0);
    signal RW_signal : std_logic;

    signal mem_out : std_logic_vector(31 DOWNTO 0);
    signal pc_out : std_logic_vector(31 DOWNTO 0);
    
    signal RZ, RN, RC, RV, FL : std_logic;--not sure what to do here
        
begin

micr0: micro_con port map(
Vflag=>   Vflag,     
Cflag=>   Cflag,     
Nflag=>   Nflag,     
Zflag=>   Zflag,                 
instruction =>mem_out,
clk=>clk,         
reset=>reset,                   
PCout=>pc_out,                  
FL=>  FL,        
RZ=>  RZ,        
RN=>  RN,        
RC=>  RC,        
RV=>  RV,
                    
TD=>  TD,        
TA=>  TA,        
TB=>  TB, 
                 
MB=>  MB,        
FS=>  FS,        
MD=>  MD,        
RW=>  RW_signal,        
MM=>  MM,        
MW=>  MW,                              
                  
DR=>  DR,        
SA=>  SA,        
SB=>  SB        

);

datapath0: dataPath port map(
clk=>          clk ,              
write=>RW_signal,      
            
MB_select=>    MB,  
MD_select=>    MD,  
data_in=>      mem_out,   
D_address(4 downto 0)=>DR,
D_address(5)=>TD,

A_address(4 downto 0)=>SA,
A_address(5)=>TA,
  
B_address(4 downto 0)=>SB,
B_address(5)=>TB,

FS =>          FS,         
            
address_out=>  adr_out,
data_out=>     data_out,   
V    =>        VFlag,          
C    =>        CFlag,          
N    =>        NFlag,          
Z    =>        ZFlag,          

SB   =>        SB,         
  
MM  =>         MM,         
pc_in =>       pc_out      



);

memory0: memory port map(
clk=>clk,
address=>  adr_out, 
data_in=>  data_out, 
MW     =>  MW,      
data_out=> mem_out
);

end Behavioral;
