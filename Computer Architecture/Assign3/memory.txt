----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 20.12.2020 22:55:55
-- Design Name: 
-- Module Name: memory - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.std_logic_unsigned.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity memory is
 Port ( clk: in std_logic;
        address : in std_logic_vector(31 downto 0);
        data_in : in  std_logic_vector(31 downto 0);
        MW: in std_logic;
        data_out: out std_logic_vector(31 downto 0)
        );
end memory;

architecture Behavioral of memory is
-- we will use the least significant 9 bit of the address - array(0 to 512)
type mem_array is array(0 to 511) of std_logic_vector(31 downto 0);
-- define type, for memory arrays
begin
mem_process: process (address, data_in)
-- initialize data memory, X denotes hexadecimal number
variable data_mem : mem_array := (

--              Instruction                     EXAMPLE         OPCODE(17)             DR(5)|SA(5)|SB(5)   
X"00000421",--   ADI R1,R1,#1 (ADD CONSTANT)     R1=0+1         00000000000000000      00001 00001 00001
X"00028421",--   ADD R1,R1,R1 (ADD WITH REG)     R1=1+1         00000000000000101      00001 00001 00001
X"00001084",--   ADI R4,R4,#4 (ADD CONSTANT)     R4=0+1         00000000000000000      00100 00100 00100
X"00039084",--   SR  R4,R4,R4 (SHIFT RIGHT)	 R4>>1=f	00000000000000111      00100 00100 00100 ??????
X"0000142A",--   ADD R3,R1,#10 			 R3=(2+10)= 12  00000000000000000      00101 00001 01010 
X"00009C60",--   LD  R7,MEM[R3]                  r7=MEM[12]     00000000000000001      00111 00011 00000
X"00020C60",--	 NOT R3, R3			 R3 =(~12)      00000000000000100      00011 00011 00000		
X"00018C60",-- 	 INC R3, R3			 R3 = R3+1=0    00000000000000011      00011 00011 00000									

X"00000000",
X"00000000",
X"00000000",
X"00000000",
--MEM 12
X"0001FFFF",

X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",
X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000",X"00000000", X"00000000", X"00000000",X"00000000"
);
variable addr:integer;
begin -- the following type conversion function is in std_logic_arith
    addr:=conv_integer(address(8 downto 0));
    if MW ='1' and clk='1' then
    data_mem(addr):= data_in;
    elsif MW='0'and clk='1' then
    data_out <= data_mem(addr) after 5 ns;
    end if;
    end process;

end Behavioral;
