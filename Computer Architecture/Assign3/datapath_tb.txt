----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 23.12.2020 14:30:34
-- Design Name: 
-- Module Name: datapath_tb - testbench
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity datapath_tb is
--  Port ( );
end datapath_tb;

architecture testBench of datapath_tb is

component dataPath
      port ( 
        clk : in std_logic;
        write: in std_logic;
        
        MB_select: in STD_LOGIC;
        MD_select: in STD_LOGIC;
        data_in : in  STD_LOGIC_VECTOR (31 downto 0);
        D_address : in std_logic_vector(5 downto 0);
        A_address : in std_logic_vector(5 downto 0);
        B_address : in std_logic_vector(5 downto 0);       
        FS: in  STD_LOGIC_VECTOR (4 downto 0);
        
        
        address_out : out  STD_LOGIC_VECTOR (31 downto 0);
        data_out : out  STD_LOGIC_VECTOR (31 downto 0);
        V : out STD_LOGIC;
        C : out STD_LOGIC;
        N : out STD_LOGIC;
        Z : out STD_LOGIC;
        --for zero fill
        SB:in std_logic_vector(4 downto 0);  
        MM : in std_logic;
        pc_in : in  STD_LOGIC_VECTOR (31 downto 0));
  end component;

--signals
signal clk :  std_logic;
signal write:  std_logic;
--signal constant_in :   STD_LOGIC_VECTOR (31 downto 0);
signal MB_select:  STD_LOGIC;
signal MD_select:  STD_LOGIC;
signal data_in :   STD_LOGIC_VECTOR (31 downto 0);
signal D_address :  std_logic_vector(5 downto 0);
signal A_address :  std_logic_vector(5 downto 0);
signal B_address :  std_logic_vector(5 downto 0);       
signal FS:   STD_LOGIC_VECTOR (4 downto 0);


signal address_out :   STD_LOGIC_VECTOR (31 downto 0);
signal data_out :   STD_LOGIC_VECTOR (31 downto 0);
signal V :  STD_LOGIC;
signal C :  STD_LOGIC;
signal N :  STD_LOGIC;
signal Z :  STD_LOGIC;

signal SB:std_logic_vector(4 downto 0);
signal MM :  std_logic;
signal  pc_in :   STD_LOGIC_VECTOR (31 downto 0);

begin

 uut: dataPath port map(clk => clk,
                        write=>write,
                       
                        MB_select=>MB_select,
                        MD_select=> MD_select,
                        data_in => data_in ,
                        D_address => D_address,
                        A_address => A_address,
                        B_address => B_address,
                        FS =>    FS,                                                        
                        address_out =>address_out,
                        data_out =>data_out,
                        V =>V,
                        C =>C,
                        N =>N,
                        Z =>Z,
                        
                        SB=>SB,
                        MM=>MM,
                        pc_in=>pc_in
        );
        
  stimulus: process
  
  begin
  
  
    -- rising edge
    wait for 50 ns;
    clk <= '1';
    
    -- falling edge
    wait for 50 ns;
    clk <= '0';
    -- write 0x00000000 to register 0 and show it on data_out
    write <= '1';
    MD_select <= '1';
    D_address <= "000000";
    data_in <= x"00000000";
    MB_select <= '0';
    B_address <= "000000";
    A_address <= "000000";
  
      -- rising edge
    wait for 50 ns;
    clk <= '1';
    
    -- falling edge
    wait for 50 ns;
    clk <= '0';
-------------------    
    -- write 0xaaaaaaaa value to register 1 and show it on data_out
    D_address <= "000001";
    data_in <= x"aaaaaaaa";
    MB_select <= '0';
    B_address <= "000001";
    A_address <= "000001";
  
      -- rising edge
    wait for 50 ns;
    clk <= '1';
    
    --falling edge
    wait for 50 ns;
    clk <= '0';
--------------------    
    -- test if FS works to the newly added register. 
    --transfer the value in R0 into R32(temp register); r32=0x00000000 z=1
    D_address <= "100001";
    A_address <= "000000";
    MD_select <= '0';
    FS <= "00000"; --F=A
   
    -- rising edge
    wait for 50 ns;
    clk <= '1';
    
    -- falling edge
    wait for 50 ns;
    clk <= '0';
---------------
--
A_address<="000001";
wait for 50 ns;
--
write<='0';  
MM<='1';  
MD_select<='1';  
MB_select<='0';   
pc_in    <=x"12345678";
wait for 50 ns;
--MUXB
SB<="00101";
MB_select<='1';
 wait for 50 ns;
    
        wait;
  end process;

end testBench;